import 'package:dartz/dartz.dart';
import 'package:cashnetic/domain/entities/category.dart';
import 'package:cashnetic/domain/failures/failure.dart';
import 'package:cashnetic/domain/failures/repository_failure.dart';
import 'package:cashnetic/domain/repositories/category_repository.dart';
import 'package:cashnetic/domain/entities/transaction.dart';

class MockedCategoryRepository implements CategoryRepository {
  final List<Category> _mockCategories = [
    Category(
      id: 1,
      name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      emoji: 'üõí',
      isIncome: false,
      color: '#4CAF50',
    ),
    Category(
      id: 2,
      name: '–†–µ–º–æ–Ω—Ç',
      emoji: 'üè†',
      isIncome: false,
      color: '#FF9800',
    ),
    Category(
      id: 3,
      name: '–û–¥–µ–∂–¥–∞',
      emoji: 'üëó',
      isIncome: false,
      color: '#9C27B0',
    ),
    Category(
      id: 4,
      name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      emoji: 'üì±',
      isIncome: false,
      color: '#2196F3',
    ),
    Category(
      id: 5,
      name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      emoji: 'üéâ',
      isIncome: false,
      color: '#E91E63',
    ),
    Category(
      id: 6,
      name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      emoji: 'üéì',
      isIncome: false,
      color: '#3F51B5',
    ),
    Category(
      id: 7,
      name: '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
      emoji: 'üê∂',
      isIncome: false,
      color: '#795548',
    ),
    Category(
      id: 8,
      name: '–ó–¥–æ—Ä–æ–≤—å–µ',
      emoji: 'üíä',
      isIncome: false,
      color: '#F44336',
    ),
    Category(
      id: 9,
      name: '–ü–æ–¥–∞—Ä–∫–∏',
      emoji: 'üéÅ',
      isIncome: false,
      color: '#FF5722',
    ),
    Category(
      id: 10,
      name: '–°–ø–æ—Ä—Ç',
      emoji: 'üèãÔ∏è',
      isIncome: false,
      color: '#00BCD4',
    ),
    Category(
      id: 11,
      name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      emoji: 'üöå',
      isIncome: false,
      color: '#607D8B',
    ),
    Category(
      id: 12,
      name: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      emoji: 'üíº',
      isIncome: true,
      color: '#8BC34A',
    ),
    Category(
      id: 13,
      name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞',
      emoji: 'ü™ô',
      isIncome: true,
      color: '#CDDC39',
    ),
  ];

  @override
  Future<Either<Failure, List<Category>>> getAllCategories() async {
    try {
      return right(_mockCategories);
    } catch (e) {
      return left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'));
    }
  }

  @override
  Future<Either<Failure, List<Category>>> getCategoriesByIsIncome(
    bool isIncome,
  ) async {
    final filtered = _mockCategories
        .where((c) => c.isIncome == isIncome)
        .toList();
    return right(filtered);
  }

  @override
  Future<Either<Failure, Category>> addCategory({
    required String name,
    String emoji = 'üí∞',
    required bool isIncome,
    String color = '#E0E0E0',
  }) async {
    try {
      final newCat = Category(
        id: _mockCategories.isNotEmpty
            ? _mockCategories.map((c) => c.id).reduce((a, b) => a > b ? a : b) +
                  1
            : 1,
        name: name,
        emoji: emoji,
        isIncome: isIncome,
        color: color,
      );
      _mockCategories.add(newCat);
      return right(newCat);
    } catch (e) {
      return left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, bool>> deleteCategory(int categoryId) async {
    try {
      final initialLen = _mockCategories.length;
      _mockCategories.removeWhere((c) => c.id == categoryId);
      final deleted = _mockCategories.length < initialLen;
      return right(deleted);
    } catch (e) {
      return left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —ç—Ç–∏–º categoryId
  @override
  Future<Either<Failure, bool>> deleteCategoryIfUnused(
    int categoryId,
    List<dynamic> allTransactions,
  ) async {
    try {
      final used = allTransactions.any((t) => t.categoryId == categoryId);
      if (used) return right(false);
      return await deleteCategory(categoryId);
    } catch (e) {
      return left(
        RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'),
      );
    }
  }
}
