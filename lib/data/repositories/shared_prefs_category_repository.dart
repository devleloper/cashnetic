import 'dart:convert';
import 'package:dartz/dartz.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cashnetic/domain/repositories/category_repository.dart';
import 'package:cashnetic/domain/entities/category.dart';
import 'package:cashnetic/domain/failures/failure.dart';
import 'package:cashnetic/domain/failures/repository_failure.dart';
import 'package:cashnetic/domain/entities/transaction.dart';

class SharedPrefsCategoryRepository implements CategoryRepository {
  static const _storageKey = 'categories_storage';

  final List<Category> _defaultCategories = [
    Category(
      id: 1,
      name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      emoji: 'üõí',
      isIncome: false,
      color: '#4CAF50',
    ),
    Category(
      id: 2,
      name: '–†–µ–º–æ–Ω—Ç',
      emoji: 'üè†',
      isIncome: false,
      color: '#FF9800',
    ),
    Category(
      id: 3,
      name: '–û–¥–µ–∂–¥–∞',
      emoji: 'üëó',
      isIncome: false,
      color: '#9C27B0',
    ),
    Category(
      id: 4,
      name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      emoji: 'üì±',
      isIncome: false,
      color: '#2196F3',
    ),
    Category(
      id: 5,
      name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      emoji: 'üéâ',
      isIncome: false,
      color: '#E91E63',
    ),
    Category(
      id: 6,
      name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      emoji: 'üéì',
      isIncome: false,
      color: '#3F51B5',
    ),
    Category(
      id: 7,
      name: '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
      emoji: 'üê∂',
      isIncome: false,
      color: '#795548',
    ),
    Category(
      id: 8,
      name: '–ó–¥–æ—Ä–æ–≤—å–µ',
      emoji: 'üíä',
      isIncome: false,
      color: '#F44336',
    ),
    Category(
      id: 9,
      name: '–ü–æ–¥–∞—Ä–∫–∏',
      emoji: 'üéÅ',
      isIncome: false,
      color: '#FF5722',
    ),
    Category(
      id: 10,
      name: '–°–ø–æ—Ä—Ç',
      emoji: 'üèãÔ∏è',
      isIncome: false,
      color: '#00BCD4',
    ),
    Category(
      id: 11,
      name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      emoji: 'üöå',
      isIncome: false,
      color: '#607D8B',
    ),
    Category(
      id: 12,
      name: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      emoji: 'üíº',
      isIncome: true,
      color: '#8BC34A',
    ),
    Category(
      id: 13,
      name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞',
      emoji: 'ü™ô',
      isIncome: true,
      color: '#CDDC39',
    ),
  ];

  final List<Category> _categories = [];
  int _nextId = 14;

  Future<void> _loadFromStorage() async {
    if (_categories.isNotEmpty) return;

    try {
      final prefs = await SharedPreferences.getInstance();
      final rawJson = prefs.getString(_storageKey);

      if (rawJson == null) {
        _categories.addAll(_defaultCategories);
        _nextId =
            _defaultCategories
                .map((c) => c.id)
                .fold(0, (a, b) => a > b ? a : b) +
            1;
        await _saveToStorage();
        return;
      }

      final List<dynamic> decoded = jsonDecode(rawJson);
      final stored = decoded.map((e) => _categoryFromJson(e)).toList();
      _categories.addAll(stored);
      _nextId =
          _categories.map((c) => c.id).fold(0, (a, b) => a > b ? a : b) + 1;
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      _categories.clear();
      _categories.addAll(_defaultCategories);
      _nextId =
          _defaultCategories.map((c) => c.id).fold(0, (a, b) => a > b ? a : b) +
          1;
      await _saveToStorage();
    }
  }

  Future<void> _saveToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final encoded = jsonEncode(
        _categories.map((e) => _categoryToJson(e)).toList(),
      );
      await prefs.setString(_storageKey, encoded);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  Map<String, dynamic> _categoryToJson(Category category) {
    return {
      'id': category.id,
      'name': category.name,
      'emoji': category.emoji,
      'isIncome': category.isIncome,
      'color': category.color,
    };
  }

  Category _categoryFromJson(Map<String, dynamic> json) {
    return Category(
      id: json['id'] as int,
      name: json['name'] as String,
      emoji: json['emoji'] as String,
      isIncome: json['isIncome'] as bool,
      color: json['color'] as String,
    );
  }

  @override
  Future<Either<Failure, List<Category>>> getAllCategories() async {
    try {
      await _loadFromStorage();
      return Right(List.unmodifiable(_categories));
    } catch (e) {
      return Left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  @override
  Future<Either<Failure, List<Category>>> getCategoriesByIsIncome(
    bool isIncome,
  ) async {
    try {
      await _loadFromStorage();
      final filtered = _categories
          .where((c) => c.isIncome == isIncome)
          .toList(growable: false);
      return Right(filtered);
    } catch (e) {
      return Left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  Future<Either<Failure, Category>> addCategory({
    required String name,
    String emoji = 'üí∞',
    required bool isIncome,
    String color = '#E0E0E0',
  }) async {
    try {
      await _loadFromStorage();

      final newCat = Category(
        id: _nextId++,
        name: name,
        emoji: emoji,
        isIncome: isIncome,
        color: color,
      );

      _categories.add(newCat);
      await _saveToStorage();
      return Right(newCat);
    } catch (e) {
      return Left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  Future<Either<Failure, Category?>> updateCategory(Category category) async {
    try {
      await _loadFromStorage();

      final index = _categories.indexWhere((c) => c.id == category.id);
      if (index == -1) return Right(null);

      _categories[index] = category;
      await _saveToStorage();
      return Right(category);
    } catch (e) {
      return Left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  Future<Either<Failure, bool>> deleteCategory(int categoryId) async {
    try {
      await _loadFromStorage();

      final initialLen = _categories.length;
      _categories.removeWhere((c) => c.id == categoryId);
      final deleted = _categories.length < initialLen;

      if (deleted) await _saveToStorage();
      return Right(deleted);
    } catch (e) {
      return Left(RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, bool>> deleteCategoryIfUnused(
    int categoryId,
    List<dynamic> allTransactions,
  ) async {
    try {
      await _loadFromStorage();
      final used = allTransactions.any((t) => t.categoryId == categoryId);
      if (used) return Right(false);
      return await deleteCategory(categoryId);
    } catch (e) {
      return Left(
        RepositoryFailure('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'),
      );
    }
  }
}
