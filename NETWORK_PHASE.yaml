# NETWORK_PHASE.yaml

# 1. Описание API и сущностей

API SHMR Finance предоставляет REST-интерфейс для работы с:
- Счетами (accounts)
- Категориями (categories)
- Транзакциями (transactions)
- Историей изменений счетов (account history)

Все запросы требуют авторизации через Bearer Token (JWT).

## Основные сущности:
- **Account**: id, userId, name, balance, currency, createdAt, updatedAt
- **Category**: id, name, emoji, isIncome, color
- **Transaction**: id, accountId, categoryId, amount, transactionDate, comment, createdAt, updatedAt
- **AccountHistory**: id, accountId, changeType, previousState, newState, changeTimestamp, createdAt
- **StatItem**: categoryId, categoryName, emoji, amount

# 2. Эндпоинты и их назначение

## Accounts
- `GET /accounts` — список счетов пользователя
- `POST /accounts` — создать счет
- `GET /accounts/{id}` — получить счет по id (со статистикой)
- `PUT /accounts/{id}` — обновить счет
- `DELETE /accounts/{id}` — удалить счет (если нет транзакций)
- `GET /accounts/{id}/history` — история изменений счета

## Categories
- `GET /categories` — все категории
- `GET /categories/type/{isIncome}` — категории по типу (доход/расход)

## Transactions
- `POST /transactions` — создать транзакцию
- `GET /transactions/{id}` — получить транзакцию по id
- `PUT /transactions/{id}` — обновить транзакцию
- `DELETE /transactions/{id}` — удалить транзакцию
- `GET /transactions/account/{accountId}/period?startDate&endDate` — транзакции по счету за период

# 3. Требования к сетевому слою
- Использовать Dio как HTTP-клиент
- Единый экземпляр клиента для всех запросов
- Авторизация через Bearer Token (JWT)
- Обработка ошибок и автоматические ретраи с exponential backoff для кодов 500, 502, 503, 504, 408, 429
- Централизованная обработка ошибок и логирование
- Возможность подмены/mock для offline-режима

# 4. Требования к offline-first и синхронизации
- Все изменения сначала сохраняются локально (Drift), затем отправляются на сервер
- Операции (создание/изменение/удаление) должны попадать в очередь для синхронизации
- При старте/восстановлении соединения — попытка синхронизировать очередь с сервером
- После успешной синхронизации — удалять локальные операции из очереди
- При ошибках — показывать индикатор/алерт в UI
- В UI показывать индикатор offline-режима (например, красная полоса "Offline mode")
- Локальное хранилище поддерживать для счетов, категорий, транзакций
- При успешной синхронизации — обновлять локальные данные ответом сервера

# 5. Архитектурные шаги для реализации

## 5.1. Сетевой слой
- [ ] Создать NetworkClient (Dio singleton) с интерцепторами для авторизации и обработки ошибок
- [ ] Реализовать retry с exponential backoff
- [ ] Вынести все сетевые запросы в отдельные data-репозитории (Account, Category, Transaction)
- [ ] DTO-модели сгенерировать по спецификации (уже есть)

## 5.2. Offline-first и синхронизация
- [ ] Создать очередь операций (например, Drift-таблица OperationQueue)
- [ ] При изменениях (create/update/delete) — сохранять операцию в очередь и локально применять
- [ ] Фоновый воркер/сервис для синхронизации очереди с сервером
- [ ] После успешной отправки — удалять операцию из очереди, обновлять локальные данные
- [ ] UI-индикаторы: offline, ошибки, прогресс

## 5.3. Интеграция с существующим кодом
- [ ] Репозитории domain должны работать через data-репозитории, которые сами решают — брать данные из сети или локально
- [ ] BLoC-слои не должны знать о деталях синхронизации
- [ ] Для тестов и offline-режима — использовать mock-репозитории

# 6. Рекомендации по интеграции
- Начать с сетевого слоя и моделей (Dio, интерцепторы, DTO)
- Продумать архитектуру очереди операций и синхронизации
- Постепенно внедрять offline-first: сначала для транзакций, затем для счетов и категорий
- UI-индикаторы offline/ошибок — добавить сразу для лучшей UX
- Для тестирования — реализовать mock-режим (без сервера)

# 7. TODO (чеклист)
- [ ] NetworkClient (Dio)
- [ ] Интерцепторы (авторизация, ошибки, retry)
- [ ] Data-репозитории для Account, Category, Transaction
- [ ] Очередь операций (Drift)
- [ ] Сервис синхронизации
- [ ] UI-индикаторы offline/ошибок
- [ ] Интеграция с BLoC через domain-репозитории 